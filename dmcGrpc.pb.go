// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dmcGrpc.proto

/*
Package gserver is a generated protocol buffer package.

It is generated from these files:
	dmcGrpc.proto

It has these top-level messages:
	ScoreQuery
	DmcScores
*/
package gserver

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the user's name.
type ScoreQuery struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *ScoreQuery) Reset()                    { *m = ScoreQuery{} }
func (m *ScoreQuery) String() string            { return proto.CompactTextString(m) }
func (*ScoreQuery) ProtoMessage()               {}
func (*ScoreQuery) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *ScoreQuery) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The response message containing the greeting
type DmcScores struct {
	LoginName   string   `protobuf:"bytes,1,opt,name=loginName" json:"loginName,omitempty"`
	TotalScore  int32    `protobuf:"varint,2,opt,name=totalScore" json:"totalScore,omitempty"`
	ScoreDate   string   `protobuf:"bytes,3,opt,name=scoreDate" json:"scoreDate,omitempty"`
	DetailScore []string `protobuf:"bytes,4,rep,name=detailScore" json:"detailScore,omitempty"`
}

func (m *DmcScores) Reset()                    { *m = DmcScores{} }
func (m *DmcScores) String() string            { return proto.CompactTextString(m) }
func (*DmcScores) ProtoMessage()               {}
func (*DmcScores) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *DmcScores) GetLoginName() string {
	if m != nil {
		return m.LoginName
	}
	return ""
}

func (m *DmcScores) GetTotalScore() int32 {
	if m != nil {
		return m.TotalScore
	}
	return 0
}

func (m *DmcScores) GetScoreDate() string {
	if m != nil {
		return m.ScoreDate
	}
	return ""
}

func (m *DmcScores) GetDetailScore() []string {
	if m != nil {
		return m.DetailScore
	}
	return nil
}

func init() {
	proto.RegisterType((*ScoreQuery)(nil), "gserver.ScoreQuery")
	proto.RegisterType((*DmcScores)(nil), "gserver.DmcScores")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DmcRouteGuide service

type DmcRouteGuideClient interface {
	InstallAndUnstall(ctx context.Context, in *ScoreQuery, opts ...grpc.CallOption) (DmcRouteGuide_InstallAndUnstallClient, error)
}

type dmcRouteGuideClient struct {
	cc *grpc.ClientConn
}

func NewDmcRouteGuideClient(cc *grpc.ClientConn) DmcRouteGuideClient {
	return &dmcRouteGuideClient{cc}
}

func (c *dmcRouteGuideClient) InstallAndUnstall(ctx context.Context, in *ScoreQuery, opts ...grpc.CallOption) (DmcRouteGuide_InstallAndUnstallClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DmcRouteGuide_serviceDesc.Streams[0], c.cc, "/gserver.dmcRouteGuide/InstallAndUnstall", opts...)
	if err != nil {
		return nil, err
	}
	x := &dmcRouteGuideInstallAndUnstallClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DmcRouteGuide_InstallAndUnstallClient interface {
	Recv() (*DmcScores, error)
	grpc.ClientStream
}

type dmcRouteGuideInstallAndUnstallClient struct {
	grpc.ClientStream
}

func (x *dmcRouteGuideInstallAndUnstallClient) Recv() (*DmcScores, error) {
	m := new(DmcScores)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for DmcRouteGuide service

type DmcRouteGuideServer interface {
	InstallAndUnstall(*ScoreQuery, DmcRouteGuide_InstallAndUnstallServer) error
}

func RegisterDmcRouteGuideServer(s *grpc.Server, srv DmcRouteGuideServer) {
	s.RegisterService(&_DmcRouteGuide_serviceDesc, srv)
}

func _DmcRouteGuide_InstallAndUnstall_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ScoreQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DmcRouteGuideServer).InstallAndUnstall(m, &dmcRouteGuideInstallAndUnstallServer{stream})
}

type DmcRouteGuide_InstallAndUnstallServer interface {
	Send(*DmcScores) error
	grpc.ServerStream
}

type dmcRouteGuideInstallAndUnstallServer struct {
	grpc.ServerStream
}

func (x *dmcRouteGuideInstallAndUnstallServer) Send(m *DmcScores) error {
	return x.ServerStream.SendMsg(m)
}

var _DmcRouteGuide_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gserver.dmcRouteGuide",
	HandlerType: (*DmcRouteGuideServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InstallAndUnstall",
			Handler:       _DmcRouteGuide_InstallAndUnstall_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dmcGrpc.proto",
}

func init() { proto.RegisterFile("dmcGrpc.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 245 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xcd, 0x4a, 0xc4, 0x30,
	0x14, 0x85, 0x8d, 0x33, 0x2a, 0xbd, 0x22, 0x62, 0xdc, 0x14, 0x15, 0x09, 0x5d, 0x75, 0x15, 0x06,
	0x7d, 0x01, 0x1d, 0x06, 0x06, 0x37, 0x32, 0x53, 0x11, 0xd7, 0xb1, 0xb9, 0xd4, 0x42, 0xda, 0x5b,
	0x92, 0xd4, 0x9f, 0x47, 0xf0, 0xad, 0x87, 0x64, 0x86, 0xb6, 0xbb, 0x8f, 0x8f, 0x73, 0x16, 0xe7,
	0xc0, 0x85, 0x6e, 0xca, 0xb5, 0xed, 0x4a, 0xd9, 0x59, 0xf2, 0xc4, 0xcf, 0x2a, 0x87, 0xf6, 0x1b,
	0x6d, 0x26, 0x00, 0xde, 0x4a, 0xb2, 0xb8, 0xed, 0xd1, 0xfe, 0x71, 0x0e, 0xf3, 0x56, 0x35, 0x98,
	0x32, 0xc1, 0xf2, 0xa4, 0x88, 0x9c, 0xfd, 0x33, 0x48, 0x56, 0x4d, 0x19, 0x53, 0x8e, 0xdf, 0x41,
	0x62, 0xa8, 0xaa, 0xdb, 0xd7, 0x31, 0x36, 0x0a, 0x7e, 0x0f, 0xe0, 0xc9, 0x2b, 0x13, 0xc3, 0xe9,
	0xb1, 0x60, 0xf9, 0x49, 0x31, 0x31, 0xa1, 0xed, 0x02, 0xac, 0x94, 0xc7, 0x74, 0xb6, 0x6f, 0x0f,
	0x82, 0x0b, 0x38, 0xd7, 0xe8, 0x55, 0x7d, 0xa8, 0xcf, 0xc5, 0x2c, 0x4f, 0x8a, 0xa9, 0x7a, 0xd8,
	0xc6, 0x1d, 0x05, 0xf5, 0x1e, 0xd7, 0x7d, 0xad, 0x91, 0x3f, 0xc1, 0xd5, 0x4b, 0xeb, 0xbc, 0x32,
	0xe6, 0xb9, 0xd5, 0xef, 0x7b, 0xe2, 0xd7, 0xf2, 0xb0, 0x4e, 0x8e, 0xd3, 0x6e, 0xf8, 0x20, 0x87,
	0x31, 0xd9, 0xd1, 0x82, 0x2d, 0x17, 0x70, 0x5b, 0x93, 0xac, 0xc2, 0x35, 0xf8, 0xab, 0x9a, 0xce,
	0xa0, 0x93, 0x5f, 0x68, 0x0c, 0xfd, 0x90, 0x35, 0x7a, 0x79, 0x19, 0xf9, 0x23, 0xf0, 0x26, 0x3c,
	0xb7, 0x61, 0x9f, 0xa7, 0xf1, 0xc2, 0xc7, 0x5d, 0x00, 0x00, 0x00, 0xff, 0xff, 0x54, 0xb8, 0xee,
	0x3c, 0x53, 0x01, 0x00, 0x00,
}
